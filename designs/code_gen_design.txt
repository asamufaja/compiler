Desugaring pass visitor
statements
most statements use the expr field and substatement field.
if's also use the else statement field if they have an else
switch statements have a list of case objects, and a list of statements for their default case
basically the expression should be evaluated and maybe be a bool or a literal for switches
that ends up looking like an if statement for the most part
first go to the expression and evaluate it, like for if (a == 3) cout << "hi";
LDR R1, a
CMPI R1, #3
BRZ if01true
BNZ if01false
if01true MOVI R3, 'h'
TRP #3
MOVI R3, 'i'
TRP #3
if01false ;next statement in program
I'd actually want to put the string in the directives and then generate a loop to print the whole string
that would be for any situation there's a string literal, to be printed or stored in a variable or something

"""expr nodes to desugar
    PLUS
    MINUS
    TIMES
    DIVIDE
    # these math should be one function that takes the op type and works the same
    PLUSEQUALS
    MINUSEQUALS
    TIMESEQUALS
    DIVIDEEQUALS
    # these math assign should be the equals and then the math type above
    EQUALS
    DOUBLEEQUALS
    # these are not really changed
    NOTEQUALS
    # this will be not and then equals
    LESSTHAN
    GREATERTHAN
    # these are not really changed
    LESSOREQUAL
    GREATEROREQUAL
    # these are going to be their < or > and then the double equals
    AND
    OR
    EXCLAMATIONMARK
    # these are not really changed
    NUM_LITERAL
    CHAR_LITERAL
    STRING_LITERAL
    TRUE
    FALSE
    NULL
    IDENTIFIER
    # these are pretty much without sugar already
    NEW
    # this is just gonna be itself, have to make a thing like a literal but
    # much more complicated to make and gotta slap on heap
    THIS
    # has to be on members to know if it's a member or not
    PERIOD
    # if it's an attribute gotta just load it I guess, if it's a method gotta call it
    INDEX
    # need to offset the variable to get to different things
    ARGUMENTS
    # this is just a list of params to be given to the function call to call
    """

"""stmnt nodes to desugar
    BRACES
    # this means a list of statements like a body
    EXPRESSION
    # this is a parent to most expressions (not initializers in var decls though) I'll keep it
    IF
    # "everything is an if" has expr, true statements, false statements (or just end)
    WHILE
    # turn into if
    RETURN
    # opposite of the dot op, maybe can make them do something similar
    COUT
    CIN
    # these are TRP 1-4 and use R3 for the data to go to/from
    SWITCH
    # make it an if
    BREAK
    # like a jump used in what are now ifs
    VAR_DECL
    # if these are in main, they should be put on the directives, maybe just put em all there though
    # could prefix ones in methods with the method name
    """

if the node I'm about to accept is an assignment type with the math (+*-/ and an =)
how about the concern of handling something like
a = 1+2+3+4+3+2+3+2+2+3+1+654   (having a really long branch in the tree, takes too many registers!)
ADD R1, R2   R1 is first operand and dest which gets overwritten, R2 is other operand.
go to bottom of = tree, to the left, there's a + expr with a 1 and 2
MOVI R1, #1
MOVI R2, #2
ADD R1, R2    do we need R2 anymore? no, just sum in R1
now we need the R1 (3) and the next node up to be in R2, which is 3
MOVI R2, #3
ADD R1, R2
if it's a variable declaration (int a = bunchofmath) then there's no expr.EQUALS node in there,
the expr = is replaced with a var decl and it's initializer points to the last math expr
just the var decl node and from it all of the math expr nodes and num_lits

Symbol table
time to start adding size and offset, that’s gonna be the stack pointer or rather frame pointer’s
offset to get
When visitor gets to an =  gonna generate some code, getting the literal value,
or whatever is the right hand side,
get the frame pointer copy and offset it, and store the literal value there.
Doing a similar thing if there’s a little math expression, but loading the value to do the math
Whether an ident node is gonna be read or written to, we could go when we are validating types
for assignments and say heyo this ident is gonna be read/written to and set a flag there.
Then in code gen we check that flag, so we generate the load or store
get_label() => int, maybe
For generating jump labels that are unique, we use this to be like making our if01, if02 etc
